@model ProductOverviewModel
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    string addtowishlistlink = "";
    string quickviewurl = Url.RouteUrl("QuickView-Product", new { productId = Model.Id });

    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (!Model.ShowQty)
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    }
    else
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist });
    }
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-box landing" data-productid="@Model.Id">
    <div class="loader-box"></div>
    <div class="container inside-container">
        <div class="row form-row">
            <div class="picture-container d-flex justify-content-center align-items-center col-lg-6 col-12 @if (!string.IsNullOrEmpty(Model.SecondPictureModel.ImageUrl)) {<text>withSecImg</text>}">
                <a class="picture" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
                    <picture>
                        <source media="(min-width: 767px)" picture-id="@Model.DefaultPictureModel.Id" picture-size="350" />
                        <img class="img-fluid lazyload" alt="@Model.DefaultPictureModel.AlternateText" data-src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
                    </picture>
                </a>
                @if (!string.IsNullOrEmpty(Model.SecondPictureModel.Id))
                {
                    <div class="hover-img">
                        <a class="picture" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
                            <picture>
                                <source media="(min-width: 767px)" picture-id="@Model.SecondPictureModel.Id" picture-size="350" />
                                <img class="img-fluid lazyload" data-src="@Model.SecondPictureModel.ImageUrl" />
                            </picture>
                        </a>
                    </div>
                }
                <div class="labels">
                    @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="product-discount product-box-label">
                            <span>-@(Convert.ToInt32((1 - Model.ProductPrice.PriceValue / Model.ProductPrice.OldPriceValue) * 100))%</span>
                        </span>
                    }
                </div>
                <div class="flying-buttons">
                    @if (!Model.ProductPrice.DisableWishlistButton && Model.ProductType == ProductType.SimpleProduct)
                    {
                        <button type="button" data-tooltip="title" title="@T("ShoppingCart.AddToWishlist")" class="btn btn-secondary" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink', '@Model.ShowQty', '@Model.Id');return false;">
                            <span class="lni lni-heart">
                            </span>
                            <span class="sr-only">AddToWishlist</span>
                        </button>
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton && Model.ProductType == ProductType.SimpleProduct)
                    {
                        <button type="button" data-tooltip="title" title="@T("ShoppingCart.AddToCompareList")" class="btn btn-secondary" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">
                            <span class="sr-only">AddToCompareList</span>
                            <span class="lni lni-reload"></span>
                        </button>
                    }
                    <button type="button" data-tooltip="title" title="@T("Products.QuickView")" class="btn btn-secondary btn-quick-view" data-toggle="modal" data-target="ModalQuickView" onclick="AjaxCart.quickview_product('@quickviewurl')">
                        <span class="lni lni-search"></span>
                    </button>
                </div>
                @if (Model.ProductType == ProductType.Auction)
                {
                    @if (Model.EndTime.HasValue)
                    {
                        <div class="countdown-box p-sm-2 p-1">
                            @if (Model.EndTime > DateTime.UtcNow)
                            {
                                <div class="countdown-container">
                                    <div class="time-holder">
                                        <div class="countdown days" data-countdown="@Model.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")"></div>
                                        <div class="title">@T("countdown.days")</div>
                                    </div>
                                    <div class="time-holder">
                                        <div class="countdown hours" data-countdown="@Model.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")"></div>
                                        <div class="title">@T("countdown.hours")</div>
                                    </div>
                                    <div class="time-holder">
                                        <div class="countdown minutes" data-countdown="@Model.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")"></div>
                                        <div class="title">@T("countdown.minutes")</div>
                                    </div>
                                    <div class="time-holder">
                                        <div class="countdown seconds" data-countdown="@Model.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")"></div>
                                        <div class="title">@T("countdown.seconds")</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-inline-flex flex-wrap justify-content-center">
                                    <label class="ended-label">@T("ShoppingCart.Auctionends"):</label>
                                    <div class="count-date">@Model.EndTimeLocalTime.Value.ToString()</div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
            <div class="product-info col-lg-6 col-12">
                <div class="top">
                    @if (Model.GenericAttributes.Any())
                    {
                        var LandingName = Model.GenericAttributes.FirstOrDefault(x => x.Key == "LandingName")?.Value;
                        if (!string.IsNullOrEmpty(LandingName))
                        {
                            <div class="section-title">
                                @LandingName
                            </div>
                        }
                    }
                    <div class="title">
                        <h5 class="mb-0">
                            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
                        </h5>
                    </div>
                    @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                    {
                        int ratingPercent = 0;
                        if (Model.ReviewOverviewModel.TotalReviews != 0)
                        {
                            ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                        }
                        <div class="ratings">
                            <div class="rating-box">
                                <div class="rating" style="width: @(ratingPercent)%">
                                </div>
                            </div>
                            @{
                                decimal ratingValue = ratingPercent / (decimal)20;
                            }
                            <div class="review-count" itemprop="ratingValue">
                                <a class="d-inline-flex align-items-center mb-0 text-dark" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">
                                    <span class="mr-1">@Model.ReviewOverviewModel.TotalReviews</span>
                                    <span>@T("reviews.overview.reviews")</span>
                                </a>
                            </div>
                        </div>
                    }
                    @if (Model.ShowSku && !string.IsNullOrEmpty(Model.Sku))
                    {
                        <span class="sku">@Model.Sku</span>
                    }
                </div>
                <div class="desc">
                    @Html.Raw(Model.ShortDescription)
                </div>
                <div class="bottom">
                    @*<div class="spec-container">
                            @{
                                var group = Model.SpecificationAttributeModels.GroupBy(x => x.SpecificationAttributeName);
                            }
                            <table>
                                <thead>
                                    <tr>
                                        @foreach (var item in group)
                                        {
                                            var groupList = item.ToList();
                                            <td>
                                                <div class="content">
                                                    @groupList[0].SpecificationAttributeName:
                                                </div>
                                            </td>

                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        @foreach (var item in group)
                                        {
                                            <td>
                                                <div class="content">
                                                    @{
                                                        var groupList = item.ToList();
                                                    }

                                                    @foreach (var spec in groupList)
                                                    {
                                                        <span>
                                                            @spec.ValueRaw
                                                        </span>
                                                    }
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                </tbody>
                            </table>
                        </div>*@
                    @if (Model.ProductAttributeModels.Any())
                    {
                        <div class="attr-container">
                            <table>
                                <tbody>
                                    @foreach (var item in Model.ProductAttributeModels)
                                    {
                                        <tr>
                                            <td class="attr-name">
                                                <div class="name" data-name="@item.SeName">
                                                    @item.Name
                                                </div>
                                            </td>
                                            <td class="attr-values">
                                                <div class="attr-value">
                                                    @foreach (var spec in item.Values)
                                                    {
                                                        switch (item.AttributeControlType)
                                                        {
                                                            case AttributeControlType.DropdownList:
                                                            case AttributeControlType.Checkboxes:
                                                            case AttributeControlType.ReadonlyCheckboxes:
                                                                <div class="name radio" data-name="@spec.Name">
                                                                    @Html.Raw(spec.Name)
                                                                </div>
                                                                break;
                                                            case AttributeControlType.RadioList:
                                                                <a class="name radio" href="#" data-name="@spec.Name">
                                                                    @Html.Raw(spec.Name)
                                                                </a>
                                                                break;
                                                            case AttributeControlType.ColorSquares:
                                                                <div class="name color-container" title="@spec.Name">
                                                                    <span class="color" style="background-color:@spec.ColorSquaresRgb;">&nbsp;</span>
                                                                </div>
                                                                break;
                                                            case AttributeControlType.ImageSquares:
                                                                <div class="name image-container">
                                                                    <img src="@spec.ImageSquaresPictureModel?.ImageUrl" />
                                                                </div>
                                                                break;
                                                            default:
                                                                break;
                                                        }
                                                    }
                                                </div>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    <div class="d-inline-flex align-items-center">
                        <div class="prices-rating">
                            <div class="prices">
                                @if (Model.ProductType != ProductType.Auction)
                                {
                                    <div class="actual-price price">
                                        @Model.ProductPrice.Price
                                    </div>
                                }
                                else
                                {
                                    <div class="auction-price price">
                                        @(Model.ProductPrice.HighestBidValue > 0 ? Model.ProductPrice.HighestBid : Model.ProductPrice.StartPrice)
                                    </div>
                                }
                                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                                {
                                    <div class="old-price price">
                                        @Model.ProductPrice.OldPrice
                                    </div>
                                }
                                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                                {
                                    var inclTax = Model.TaxDisplayType == TaxDisplayType.IncludingTax;
                                    <div class="tax-shipping-info">
                                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeName("shippinginfo", Context) }))
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="buttons">
                        @if (Model.ShowQty)
                        {
                            var qtyId = "addtocart_" + @Model.Id + "_EnteredQuantity";
                            <div class="qty-container">
                                <input class="form-control input-group-addon catalog-quantity" type="text" id="@qtyId" name="@qtyId" value="1" min="1">
                                <div class="qty-controls">
                                    <span class="lni lni-plus" onclick="$(this).parents('.qty-container').find('.catalog-quantity').attr('value',function (i, oldval) {return ++oldval;}).trigger('change')"></span>
                                    <span class="lni lni-minus" onclick="$(this).parents('.qty-container').find('.catalog-quantity').attr('value', function (i, oldval) {if(oldval>1){ return --oldval; } else { return oldval}}).trigger('change')"></span>
                                </div>
                            </div>
                        }
                        @if (!Model.ProductPrice.DisableBuyButton)
                        {
                            var addToCartText = T("ShoppingCart.AddToCart").Text;
                            if (Model.ProductType == ProductType.Reservation)
                            {
                                addToCartText = T("ShoppingCart.Reservation").Text;
                            }
                            if (Model.ProductPrice.AvailableForPreOrder)
                            {
                                addToCartText = T("ShoppingCart.PreOrder").Text;
                            }
                            if (Model.ProductType == ProductType.Auction)
                            {
                                <a class="btn btn-info justify-content-center" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">
                                    <span class="add-cart-text">@T("food.gotoproduct")</span>
                                    <span class="sr-only">AddToCart</span>
                                </a>
                            }
                            else
                            {
                                <button type="button" class="btn btn-info justify-content-center" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.ShowQty', '@Model.Id');return false;">
                                    <span class="lni lni-cart"></span>
                                    <span class="add-cart-text">@(addToCartText)</span>
                                    <span class="sr-only">AddToCart</span>
                                </button>
                            }
                        }
                        else
                        {
                            if (Model.ProductType == ProductType.Auction)
                            {
                                var addToCartText = T("ShoppingCart.Bids").Text;
                                <button type="button" class="btn btn-info justify-content-center" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', 'false', '@Model.Id');return false;">
                                    <span class="lni lni-construction-hammer"></span>
                                    <span class="add-cart-text">@(addToCartText)</span>
                                    <span class="sr-only">AddToCart</span>
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>